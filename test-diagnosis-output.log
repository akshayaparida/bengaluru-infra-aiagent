
> bengaluru-infra-aiagent@0.1.0 test /home/akshayaparida/bengaluru-infra-aiagent
> vitest tests/integration/complete-diagnosis.test.ts --reporter\=verbose


 DEV  v3.2.4 /home/akshayaparida/bengaluru-infra-aiagent

stdout | tests/integration/complete-diagnosis.test.ts > COMPLETE TDD DIAGNOSIS > Step 1: Server Health Checks > Next.js should be running on port 3000
Next.js Status: [33m200[39m

 ✓ tests/integration/complete-diagnosis.test.ts > COMPLETE TDD DIAGNOSIS > Step 1: Server Health Checks > Next.js should be running on port 3000 336ms
stdout | tests/integration/complete-diagnosis.test.ts > COMPLETE TDD DIAGNOSIS > Step 1: Server Health Checks > MCP Gateway should be running on port 8008
MCP Gateway Health: { status: [32m'ok'[39m, service: [32m'mcp-gateway'[39m, cerebras: [32m'connected'[39m }

 ✓ tests/integration/complete-diagnosis.test.ts > COMPLETE TDD DIAGNOSIS > Step 1: Server Health Checks > MCP Gateway should be running on port 8008 21ms
stdout | tests/integration/complete-diagnosis.test.ts > COMPLETE TDD DIAGNOSIS > Step 1: Server Health Checks > PostgreSQL should be accessible
Database connection status: [33m200[39m

 ✓ tests/integration/complete-diagnosis.test.ts > COMPLETE TDD DIAGNOSIS > Step 1: Server Health Checks > PostgreSQL should be accessible 352ms
stdout | tests/integration/complete-diagnosis.test.ts > COMPLETE TDD DIAGNOSIS > Step 2: Environment Configuration > should have MCP_BASE_URL set to port 8008
MCP_BASE_URL: [90mundefined[39m

stderr | tests/integration/complete-diagnosis.test.ts > COMPLETE TDD DIAGNOSIS > Step 2: Environment Configuration > should have MCP_BASE_URL set to port 8008
❌ MCP_BASE_URL is not set!
Fix: Add to .env.local: MCP_BASE_URL=http://localhost:8008

stdout | tests/integration/complete-diagnosis.test.ts > COMPLETE TDD DIAGNOSIS > Step 2: Environment Configuration > should have CEREBRAS_API_KEY configured
CEREBRAS_API_KEY exists: [33mfalse[39m

stderr | tests/integration/complete-diagnosis.test.ts > COMPLETE TDD DIAGNOSIS > Step 2: Environment Configuration > should have CEREBRAS_API_KEY configured
❌ CEREBRAS_API_KEY not found in environment
Check: .env or .env.local file

stdout | tests/integration/complete-diagnosis.test.ts > COMPLETE TDD DIAGNOSIS > Step 3: Photo Upload Endpoint > should accept photo uploads
Uploading test report...

 × tests/integration/complete-diagnosis.test.ts > COMPLETE TDD DIAGNOSIS > Step 2: Environment Configuration > should have MCP_BASE_URL set to port 8008 29ms
   → expected undefined to be truthy
 × tests/integration/complete-diagnosis.test.ts > COMPLETE TDD DIAGNOSIS > Step 2: Environment Configuration > should have CEREBRAS_API_KEY configured 11ms
   → expected false to be true // Object.is equality
stdout | tests/integration/complete-diagnosis.test.ts > COMPLETE TDD DIAGNOSIS > Step 3: Photo Upload Endpoint > should accept photo uploads
Upload Status: [33m201[39m

stdout | tests/integration/complete-diagnosis.test.ts > COMPLETE TDD DIAGNOSIS > Step 3: Photo Upload Endpoint > should accept photo uploads
Report Created: { id: [32m'cmgb9sl5m0001pnplkgaw0ejt'[39m }

 ✓ tests/integration/complete-diagnosis.test.ts > COMPLETE TDD DIAGNOSIS > Step 3: Photo Upload Endpoint > should accept photo uploads 390ms
stdout | tests/integration/complete-diagnosis.test.ts > COMPLETE TDD DIAGNOSIS > Step 4: AI Email Generation via MCP Gateway > MCP Gateway should generate email
Testing email generation...

stdout | tests/integration/complete-diagnosis.test.ts > COMPLETE TDD DIAGNOSIS > Step 4: AI Email Generation via MCP Gateway > MCP Gateway should generate email
Email Generation Status: [33m200[39m

stdout | tests/integration/complete-diagnosis.test.ts > COMPLETE TDD DIAGNOSIS > Step 4: AI Email Generation via MCP Gateway > MCP Gateway should generate email
Generated Email: { subject: [32m'Infrastructure Report'[39m, body: [32m'Test pothole on MG Road'[39m }

 ✓ tests/integration/complete-diagnosis.test.ts > COMPLETE TDD DIAGNOSIS > Step 4: AI Email Generation via MCP Gateway > MCP Gateway should generate email 1594ms
stdout | tests/integration/complete-diagnosis.test.ts > COMPLETE TDD DIAGNOSIS > Step 4: AI Email Generation via MCP Gateway > Email API should use AI-generated content
Testing email API with report: cmgb9sl5m0001pnplkgaw0ejt

stdout | tests/integration/complete-diagnosis.test.ts > COMPLETE TDD DIAGNOSIS > Step 5: AI Tweet Generation via MCP Gateway > MCP Gateway should generate tweet with both handles
Testing tweet generation...

 × tests/integration/complete-diagnosis.test.ts > COMPLETE TDD DIAGNOSIS > Step 4: AI Email Generation via MCP Gateway > Email API should use AI-generated content 5003ms
   → Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
stdout | tests/integration/complete-diagnosis.test.ts > COMPLETE TDD DIAGNOSIS > Step 5: AI Tweet Generation via MCP Gateway > MCP Gateway should generate tweet with both handles
Email API Status: [33m200[39m

stdout | tests/integration/complete-diagnosis.test.ts > COMPLETE TDD DIAGNOSIS > Step 5: AI Tweet Generation via MCP Gateway > MCP Gateway should generate tweet with both handles
Email API Response: {
  ok: [33mtrue[39m,
  id: [32m'cmgb9sl5m0001pnplkgaw0ejt'[39m,
  messageId: [32m'<46e7e32c-bd37-e9b8-bc22-95d9899ddc2d@gmail.com>'[39m
}

stdout | tests/integration/complete-diagnosis.test.ts > COMPLETE TDD DIAGNOSIS > Step 5: AI Tweet Generation via MCP Gateway > MCP Gateway should generate tweet with both handles
Tweet Generation Status: [33m200[39m

stderr | tests/integration/complete-diagnosis.test.ts > COMPLETE TDD DIAGNOSIS > Step 5: AI Tweet Generation via MCP Gateway > MCP Gateway should generate tweet with both handles
❌ Tweet missing both civic handles!
Tweet: 🚧 @BBMPCOMM High severity pothole reported on MG Road, Bengaluru. Category: pothole. Urgent repair required to prevent accidents. #BengaluruInfrastructure

stdout | tests/integration/complete-diagnosis.test.ts > COMPLETE TDD DIAGNOSIS > Step 5: AI Tweet Generation via MCP Gateway > MCP Gateway should generate tweet with both handles
Generated Tweet: 🚧 @BBMPCOMM High severity pothole reported on MG Road, Bengaluru. Category: pothole. Urgent repair required to prevent accidents. #BengaluruInfrastructure
Has @GBA_office: [33mfalse[39m
Has @ICCCBengaluru: [33mfalse[39m

stdout | tests/integration/complete-diagnosis.test.ts > COMPLETE TDD DIAGNOSIS > Step 5: AI Tweet Generation via MCP Gateway > Tweet API should use AI-generated content
Testing tweet API with report: cmgb9sl5m0001pnplkgaw0ejt

 × tests/integration/complete-diagnosis.test.ts > COMPLETE TDD DIAGNOSIS > Step 5: AI Tweet Generation via MCP Gateway > MCP Gateway should generate tweet with both handles 385ms
   → expected false to be true // Object.is equality
stdout | tests/integration/complete-diagnosis.test.ts > COMPLETE TDD DIAGNOSIS > Step 6: MCP Gateway Connection from Next.js > Next.js should be able to reach MCP Gateway
Testing Next.js -> MCP Gateway connection...

 × tests/integration/complete-diagnosis.test.ts > COMPLETE TDD DIAGNOSIS > Step 5: AI Tweet Generation via MCP Gateway > Tweet API should use AI-generated content 5007ms
   → Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
stdout | tests/integration/complete-diagnosis.test.ts > COMPLETE TDD DIAGNOSIS > Step 6: MCP Gateway Connection from Next.js > Next.js should be able to reach MCP Gateway
Tweet API Status: [33m502[39m

stdout | tests/integration/complete-diagnosis.test.ts > COMPLETE TDD DIAGNOSIS > Step 6: MCP Gateway Connection from Next.js > Next.js should be able to reach MCP Gateway
Tweet API Response: { ok: [33mfalse[39m, reason: [32m'twitter_post_failed'[39m, detail: [32m'400'[39m }

stdout | tests/integration/complete-diagnosis.test.ts > COMPLETE TDD DIAGNOSIS > Step 6: MCP Gateway Connection from Next.js > Next.js should be able to reach MCP Gateway
Classification Status: [33m200[39m

stdout | tests/integration/complete-diagnosis.test.ts > COMPLETE TDD DIAGNOSIS > Step 6: MCP Gateway Connection from Next.js > Next.js should be able to reach MCP Gateway
Classification Response: { ok: [33mtrue[39m, category: [32m'traffic'[39m, severity: [32m'medium'[39m, simulated: [33mfalse[39m }

 ✓ tests/integration/complete-diagnosis.test.ts > COMPLETE TDD DIAGNOSIS > Step 6: MCP Gateway Connection from Next.js > Next.js should be able to reach MCP Gateway 3512ms
stdout | tests/integration/complete-diagnosis.test.ts > COMPLETE TDD DIAGNOSIS > Step 7: Port Configuration Check > should verify MCP Gateway is on correct port
Port 8008 (correct): ✅ Running
Port 8009 (wrong): ⚠️ Running

stderr | tests/integration/complete-diagnosis.test.ts > COMPLETE TDD DIAGNOSIS > Step 7: Port Configuration Check > should verify MCP Gateway is on correct port
❌ MCP Gateway is running on WRONG PORT 8009!
Fix: Kill process on 8009 and restart on 8008

 × tests/integration/complete-diagnosis.test.ts > COMPLETE TDD DIAGNOSIS > Step 7: Port Configuration Check > should verify MCP Gateway is on correct port 19ms
   → expected true to be false // Object.is equality
stdout | tests/integration/complete-diagnosis.test.ts > DIAGNOSIS SUMMARY > should print diagnosis summary
\n========================================
DIAGNOSIS SUMMARY
========================================\n

 × tests/integration/complete-diagnosis.test.ts > COMPLETE TDD DIAGNOSIS > Step 8: Email Sender Configuration > should verify email sender name is configured 5007ms
   → Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
stdout | tests/integration/complete-diagnosis.test.ts > DIAGNOSIS SUMMARY > should print diagnosis summary
Services:
  Next.js (3000): ✅
  MCP Gateway (8008): ✅
  MCP Gateway (8009): ⚠️ WRONG PORT
\nEnvironment:
  MCP_BASE_URL: ❌ NOT SET
  CEREBRAS_API_KEY: ❌ NOT SET
\nExpected Configuration:
  MCP_BASE_URL=http://localhost:8008
  CEREBRAS_API_KEY=<your-key-from-.env>
\n❌ PROBLEM: MCP Gateway running on WRONG PORT 8009
FIX: Kill port 8009 and restart on 8008
\n========================================\n

 ✓ tests/integration/complete-diagnosis.test.ts > DIAGNOSIS SUMMARY > should print diagnosis summary 259ms

⎯⎯⎯⎯⎯⎯⎯ Failed Tests 7 ⎯⎯⎯⎯⎯⎯⎯

 FAIL  tests/integration/complete-diagnosis.test.ts > COMPLETE TDD DIAGNOSIS > Step 2: Environment Configuration > should have MCP_BASE_URL set to port 8008
AssertionError: expected undefined to be truthy

[32m- Expected:[39m 
true

[31m+ Received:[39m 
undefined

 ❯ tests/integration/complete-diagnosis.test.ts:42:22
     40|       }
     41|       
     42|       expect(mcpUrl).toBeTruthy();
       |                      ^
     43|       expect(mcpUrl).toContain('8008');
     44|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/7]⎯

 FAIL  tests/integration/complete-diagnosis.test.ts > COMPLETE TDD DIAGNOSIS > Step 2: Environment Configuration > should have CEREBRAS_API_KEY configured
AssertionError: expected false to be true // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- true[39m
[31m+ false[39m

 ❯ tests/integration/complete-diagnosis.test.ts:55:22
     53|       }
     54|       
     55|       expect(hasKey).toBe(true);
       |                      ^
     56|     });
     57|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/7]⎯

 FAIL  tests/integration/complete-diagnosis.test.ts > COMPLETE TDD DIAGNOSIS > Step 4: AI Email Generation via MCP Gateway > Email API should use AI-generated content
Error: Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
 ❯ tests/integration/complete-diagnosis.test.ts:126:5
    124|     });
    125| 
    126|     it('Email API should use AI-generated content', async () => {
       |     ^
    127|       if (!testReportId) {
    128|         console.error('⚠️ Skipping: No test report created');

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[3/7]⎯

 FAIL  tests/integration/complete-diagnosis.test.ts > COMPLETE TDD DIAGNOSIS > Step 5: AI Tweet Generation via MCP Gateway > MCP Gateway should generate tweet with both handles
AssertionError: expected false to be true // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- true[39m
[31m+ false[39m

 ❯ tests/integration/complete-diagnosis.test.ts:194:33
    192|       }
    193|       
    194|       expect(hasGBA || hasICCC).toBe(true);
       |                                 ^
    195|     });
    196| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[4/7]⎯

 FAIL  tests/integration/complete-diagnosis.test.ts > COMPLETE TDD DIAGNOSIS > Step 5: AI Tweet Generation via MCP Gateway > Tweet API should use AI-generated content
Error: Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
 ❯ tests/integration/complete-diagnosis.test.ts:197:5
    195|     });
    196| 
    197|     it('Tweet API should use AI-generated content', async () => {
       |     ^
    198|       if (!testReportId) {
    199|         console.error('⚠️ Skipping: No test report created');

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[5/7]⎯

 FAIL  tests/integration/complete-diagnosis.test.ts > COMPLETE TDD DIAGNOSIS > Step 7: Port Configuration Check > should verify MCP Gateway is on correct port
AssertionError: expected true to be false // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- false[39m
[31m+ true[39m

 ❯ tests/integration/complete-diagnosis.test.ts:271:24
    269|       
    270|       expect(port8008).toBe(true);
    271|       expect(port8009).toBe(false);
       |                        ^
    272|     });
    273|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[6/7]⎯

 FAIL  tests/integration/complete-diagnosis.test.ts > COMPLETE TDD DIAGNOSIS > Step 8: Email Sender Configuration > should verify email sender name is configured
Error: Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
 ❯ tests/integration/complete-diagnosis.test.ts:276:5
    274| 
    275|   describe('Step 8: Email Sender Configuration', () => {
    276|     it('should verify email sender name is configured', async () => {
       |     ^
    277|       // Check if the code has the sender name
    278|       // This is indirect - we check if notify API works

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[7/7]⎯


 Test Files  1 failed (1)
      Tests  7 failed | 7 passed (14)
   Start at  01:31:43
   Duration  22.69s (transform 91ms, setup 0ms, collect 87ms, tests 21.93s, environment 0ms, prepare 343ms)

 FAIL  Tests failed. Watching for file changes...
       press h to show help, press q to quit
 ELIFECYCLE  Test failed. See above for more details.
